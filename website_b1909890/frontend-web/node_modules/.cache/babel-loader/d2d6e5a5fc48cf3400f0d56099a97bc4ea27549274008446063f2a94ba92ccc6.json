{"ast":null,"code":"var _jsxFileName = \"D:\\\\Workspace\\\\LuanVan\\\\website\\\\frontend-web\\\\src\\\\components\\\\layout\\\\watch.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport ReactPlayer from 'react-player/lazy';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WatchPage = () => {\n  _s();\n  const videos = [{\n    id: 1,\n    url: \"https://www.youtube.com/watch?v=KxaX-eYPjQw\"\n  }, {\n    id: 2,\n    url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\"\n  },\n  // { \n  //   id: 3,\n  //   url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\",\n  // },\n  // { \n  //   id: 4,\n  //   url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\",\n  // },\n  // { \n  //   id: 5,\n  //   url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\",\n  // },\n  // { \n  //   id: 6,\n  //   url: \"https://www.youtube.com/watch?v=KxaX-eYPjQw\",\n  // },\n  // { \n  //   id: 7,\n  //   url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\",\n  // },\n  // { \n  //   id: 8,\n  //   url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\",\n  // },\n  // { \n  //   id: 9,\n  //   url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\",\n  // },\n  // { \n  //   id: 10,\n  //   url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\",\n  // },\n  // { \n  //   id: 11,\n  //   url: \"https://www.youtube.com/watch?v=KxaX-eYPjQw\",\n  // },\n  {\n    id: 12,\n    url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\"\n  }\n  // { \n  //   id: 13,\n  //   url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\",\n  // },\n  // { \n  //   id: 14,\n  //   url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\",\n  // },\n  // { \n  //   id: 15,\n  //   url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\",\n  // },\n  ];\n\n  const [playingVideos, setPlayingVideos] = useState([]);\n  const handleVideoChange = useCallback(videoId => {\n    if (playingVideos.includes(videoId)) {\n      setPlayingVideos(prevPlayingVideos => prevPlayingVideos.filter(id => id !== videoId));\n    } else {\n      setPlayingVideos([videoId]);\n    }\n  }, [playingVideos]);\n  const handleIntersection = useCallback(entries => {\n    entries.forEach(entry => {\n      const videoId = entry.target.dataset.id;\n      const isPlaying = playingVideos.includes(videoId);\n      const videoRef = videoRefs.current.find(ref => ref.current.dataset.id === videoId);\n      if (entry.isIntersecting && !isPlaying) {\n        videoRef.current.seekTo(0);\n        videoRef.current.play();\n        setPlayingVideos(prevPlayingVideos => [...prevPlayingVideos, videoId]);\n      } else if (!entry.isIntersecting && isPlaying) {\n        videoRef.current.pause();\n        setPlayingVideos(prevPlayingVideos => prevPlayingVideos.filter(id => id !== videoId));\n      }\n    });\n  }, [playingVideos]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-screen max-h-screen overflow-auto\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-wrap justify-center items-center mt-[60px]\",\n      children: shuffledVideos.map((video, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-center items-center mb-[45px] shadow-2xl rounded-2xl overflow-hidden\",\n        onClick: handleVideoChange,\n        children: [/*#__PURE__*/_jsxDEV(ReactPlayer, {\n          // sử dụng giá trị video.id làm key\n          ref: ref => videoRefs.current[i] = ref,\n          \"data-id\": video.id,\n          url: video.url,\n          playing: playingVideo === video.id.toString(),\n          muted: true,\n          autoPlay: false,\n          onError: handleError,\n          width: \"960px\",\n          height: \"540px\",\n          controls: true,\n          allowFullScreen: true,\n          config: {\n            youtube: {\n              playerVars: {\n                showinfo: 1\n              }\n            }\n          },\n          onPlay: () => {\n            setPlayingVideos([video.id.toString()]);\n          },\n          onPause: () => {\n            setPlayingVideos([]);\n          },\n          loading: \"lazy\" // sử dụng lazy load\n        }, video.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this), console.log(playingVideos)]\n      }, video.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n_s(WatchPage, \"h1ocpQTsB6W4SlD3r9hpIi9VhY4=\");\n_c = WatchPage;\nexport default WatchPage;\nvar _c;\n$RefreshReg$(_c, \"WatchPage\");","map":{"version":3,"names":["React","useRef","useEffect","useState","ReactPlayer","jsxDEV","_jsxDEV","WatchPage","_s","videos","id","url","playingVideos","setPlayingVideos","handleVideoChange","useCallback","videoId","includes","prevPlayingVideos","filter","handleIntersection","entries","forEach","entry","target","dataset","isPlaying","videoRef","videoRefs","current","find","ref","isIntersecting","seekTo","play","pause","className","children","shuffledVideos","map","video","i","onClick","playing","playingVideo","toString","muted","autoPlay","onError","handleError","width","height","controls","allowFullScreen","config","youtube","playerVars","showinfo","onPlay","onPause","loading","fileName","_jsxFileName","lineNumber","columnNumber","console","log","_c","$RefreshReg$"],"sources":["D:/Workspace/LuanVan/website/frontend-web/src/components/layout/watch.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport ReactPlayer from 'react-player/lazy';\r\n\r\nconst WatchPage = () => {\r\n\r\n  const videos = [\r\n    { \r\n      id: 1,\r\n      url: \"https://www.youtube.com/watch?v=KxaX-eYPjQw\",\r\n    },\r\n    { \r\n      id: 2,\r\n      url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\",\r\n    },\r\n    // { \r\n    //   id: 3,\r\n    //   url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\",\r\n    // },\r\n    // { \r\n    //   id: 4,\r\n    //   url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\",\r\n    // },\r\n    // { \r\n    //   id: 5,\r\n    //   url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\",\r\n    // },\r\n    // { \r\n    //   id: 6,\r\n    //   url: \"https://www.youtube.com/watch?v=KxaX-eYPjQw\",\r\n    // },\r\n    // { \r\n    //   id: 7,\r\n    //   url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\",\r\n    // },\r\n    // { \r\n    //   id: 8,\r\n    //   url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\",\r\n    // },\r\n    // { \r\n    //   id: 9,\r\n    //   url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\",\r\n    // },\r\n    // { \r\n    //   id: 10,\r\n    //   url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\",\r\n    // },\r\n    // { \r\n    //   id: 11,\r\n    //   url: \"https://www.youtube.com/watch?v=KxaX-eYPjQw\",\r\n    // },\r\n    { \r\n      id: 12,\r\n      url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\",\r\n    },\r\n    // { \r\n    //   id: 13,\r\n    //   url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\",\r\n    // },\r\n    // { \r\n    //   id: 14,\r\n    //   url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\",\r\n    // },\r\n    // { \r\n    //   id: 15,\r\n    //   url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\",\r\n    // },\r\n   \r\n  ];\r\n  const [playingVideos, setPlayingVideos] = useState([]);\r\n  const handleVideoChange = useCallback(\r\n    (videoId) => {\r\n      if (playingVideos.includes(videoId)) {\r\n        setPlayingVideos((prevPlayingVideos) =>\r\n          prevPlayingVideos.filter((id) => id !== videoId)\r\n        );\r\n      } else {\r\n        setPlayingVideos([videoId]);\r\n      }\r\n    },\r\n    [playingVideos]\r\n  );\r\n\r\n  const handleIntersection = useCallback(\r\n    (entries) => {\r\n      entries.forEach((entry) => {\r\n        const videoId = entry.target.dataset.id;\r\n        const isPlaying = playingVideos.includes(videoId);\r\n        const videoRef = videoRefs.current.find(\r\n          (ref) => ref.current.dataset.id === videoId\r\n        );\r\n\r\n        if (entry.isIntersecting && !isPlaying) {\r\n          videoRef.current.seekTo(0);\r\n          videoRef.current.play();\r\n          setPlayingVideos((prevPlayingVideos) => [\r\n            ...prevPlayingVideos,\r\n            videoId,\r\n          ]);\r\n        } else if (!entry.isIntersecting && isPlaying) {\r\n          videoRef.current.pause();\r\n          setPlayingVideos((prevPlayingVideos) =>\r\n            prevPlayingVideos.filter((id) => id !== videoId)\r\n          );\r\n        }\r\n      });\r\n    },\r\n    [playingVideos]\r\n  );\r\n  return (\r\n    <div className=\"max-w-screen max-h-screen overflow-auto\">\r\n      <div className=\"flex flex-wrap justify-center items-center mt-[60px]\">\r\n        {shuffledVideos.map((video,i) => (\r\n          <div \r\n            key={video.id} \r\n            className=\"flex justify-center items-center mb-[45px] shadow-2xl rounded-2xl overflow-hidden\"\r\n            onClick={handleVideoChange}\r\n          >\r\n            <ReactPlayer\r\n              key={video.id} // sử dụng giá trị video.id làm key\r\n              ref={(ref) => videoRefs.current[i] = ref}\r\n              data-id={video.id}\r\n              url={video.url}\r\n              playing={playingVideo === video.id.toString()}\r\n              muted={true}\r\n              autoPlay={false}\r\n              onError={handleError}\r\n              width=\"960px\"\r\n              height=\"540px\"\r\n              controls\r\n              allowFullScreen={true}\r\n              config={{\r\n                youtube: {\r\n                  playerVars: { showinfo: 1 }\r\n                }\r\n              }}\r\n              onPlay={() => {\r\n                setPlayingVideos([video.id.toString()]);\r\n              }}\r\n              onPause={() => {\r\n                setPlayingVideos([]);\r\n              }}\r\n              loading=\"lazy\" // sử dụng lazy load\r\n            /> \r\n            {console.log(playingVideos)}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WatchPage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}