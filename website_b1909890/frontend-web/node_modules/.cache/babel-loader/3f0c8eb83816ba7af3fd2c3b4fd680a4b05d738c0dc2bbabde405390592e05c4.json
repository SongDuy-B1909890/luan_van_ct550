{"ast":null,"code":"// import React, { useRef, useState, useCallback } from 'react';\n// import ReactPlayer from 'react-player/lazy';\n// import { InView } from 'react-intersection-observer';\n\n// const WatchPage = () => {\n\n//   const videoRefs = useRef([]);\n//   const videos = [\n//     { \n//       id: 1,\n//       url: \"https://www.youtube.com/watch?v=KxaX-eYPjQw\",\n//     },\n//     { \n//       id: 2,\n//       url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\",\n//     },\n//     { \n//       id: 12,\n//       url: \"https://www.youtube.com/watch?v=WSS6lnszkrc\",\n//     },\n//   ];\n//   const [playingVideos, setPlayingVideos] = useState([]);\n//   const handleVideoChange = useCallback((videoId) => {\n//     if (playingVideos.includes(videoId)) {\n//       setPlayingVideos([]);\n//     } else {\n//       // Tạm dừng tất cả các video\n//       const pausePromises = videoRefs.current.map((ref) => {\n//         if (ref.current && ref.current.dataset.id !== videoId && ref.current.getCurrentTime() > 0 && !ref.current.ended && !ref.current.paused) {\n//           return ref.current.pause();\n//         }\n//         return Promise.resolve();\n//       });\n//       Promise.all(pausePromises).then(() => {\n//         // Trở về điểm bắt đầu của tất cả các video\n//         videoRefs.current.forEach((ref) => {\n//           if (ref.current && ref.current.dataset.id !== videoId) {\n//             ref.current.seekTo(0);\n//           }\n//         });\n//         // Phát video mới\n//         setPlayingVideos([videoId]);\n//       });\n//     }\n//   }, [playingVideos]);\n\n//   const handleIntersection = useCallback(\n//     (entries) => {\n//       entries.forEach((entry) => {\n//         const videoId = entry.target.dataset.id;\n//         const isPlaying = playingVideos.includes(videoId);\n//         const videoRef = videoRefs.current.find(\n//           (ref) => ref.current.dataset.id === videoId\n//         );\n\n//         if (entry.isIntersecting && !isPlaying) {\n//           videoRef.seekTo(0);\n//           videoRef.play();\n//           setPlayingVideos((prevPlayingVideos) => [\n//             ...prevPlayingVideos,\n//             videoId,\n//           ]);\n//         } else if (!entry.isIntersecting && isPlaying) {\n//           videoRef.pause();\n//           setPlayingVideos((prevPlayingVideos) =>\n//             prevPlayingVideos.filter((id) => id !== videoId)\n//           );\n//         }\n//       });\n//     },\n//     [playingVideos]\n//   );\n//   return (\n//     <div className=\"max-w-screen max-h-screen overflow-auto\">\n//       <div className=\"flex flex-wrap justify-center items-center mt-[60px]\">\n//         {videos.map((video) => (\n//           <div\n//             key={video.id}\n//             className=\"flex justify-center items-center mb-[45px] shadow-2xl rounded-2xl overflow-hidden\"\n\n//           >\n//             <ReactPlayer\n//               ref={(ref) => (videoRefs.current[video.id] = ref)}\n//               data-id={video.id}\n//               url={video.url}\n//               playing={playingVideos.includes(video.id)}\n//               onPlay={() => handleVideoChange(video.id)}\n//               autoPlay={false}\n//               width=\"960px\"\n//               height=\"540px\"\n//               controls\n//               allowFullScreen={true}\n//               config={{\n//                 youtube: {\n//                   playerVars: { showinfo: 1 },\n//                 },\n//               }}\n//               loading=\"lazy\"\n//               preload\n//             />\n//           </div>\n//         ))}\n//       </div>\n//       {videoRefs.current.length > 0 && (\n//         <InView\n//           rootMargin=\"0px\"\n//           threshold={0.5}\n//           onChange={handleIntersection}\n//         >\n//           {videos.map((video) => (\n//             <div\n//               key={video.id}\n//               data-id={video.id}\n//               ref={(ref) => (videoRefs.current[video.id] = ref)}\n//             />\n//           ))}\n//         </InView>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default WatchPage;","map":{"version":3,"names":[],"sources":["D:/Workspace/LuanVan/website/frontend-web/src/components/layout/watch.js"],"sourcesContent":["// import React, { useRef, useState, useCallback } from 'react';\r\n// import ReactPlayer from 'react-player/lazy';\r\n// import { InView } from 'react-intersection-observer';\r\n\r\n// const WatchPage = () => {\r\n\r\n//   const videoRefs = useRef([]);\r\n//   const videos = [\r\n//     { \r\n//       id: 1,\r\n//       url: \"https://www.youtube.com/watch?v=KxaX-eYPjQw\",\r\n//     },\r\n//     { \r\n//       id: 2,\r\n//       url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\",\r\n//     },\r\n//     { \r\n//       id: 12,\r\n//       url: \"https://www.youtube.com/watch?v=WSS6lnszkrc\",\r\n//     },\r\n//   ];\r\n//   const [playingVideos, setPlayingVideos] = useState([]);\r\n//   const handleVideoChange = useCallback((videoId) => {\r\n//     if (playingVideos.includes(videoId)) {\r\n//       setPlayingVideos([]);\r\n//     } else {\r\n//       // Tạm dừng tất cả các video\r\n//       const pausePromises = videoRefs.current.map((ref) => {\r\n//         if (ref.current && ref.current.dataset.id !== videoId && ref.current.getCurrentTime() > 0 && !ref.current.ended && !ref.current.paused) {\r\n//           return ref.current.pause();\r\n//         }\r\n//         return Promise.resolve();\r\n//       });\r\n//       Promise.all(pausePromises).then(() => {\r\n//         // Trở về điểm bắt đầu của tất cả các video\r\n//         videoRefs.current.forEach((ref) => {\r\n//           if (ref.current && ref.current.dataset.id !== videoId) {\r\n//             ref.current.seekTo(0);\r\n//           }\r\n//         });\r\n//         // Phát video mới\r\n//         setPlayingVideos([videoId]);\r\n//       });\r\n//     }\r\n//   }, [playingVideos]);\r\n\r\n//   const handleIntersection = useCallback(\r\n//     (entries) => {\r\n//       entries.forEach((entry) => {\r\n//         const videoId = entry.target.dataset.id;\r\n//         const isPlaying = playingVideos.includes(videoId);\r\n//         const videoRef = videoRefs.current.find(\r\n//           (ref) => ref.current.dataset.id === videoId\r\n//         );\r\n\r\n//         if (entry.isIntersecting && !isPlaying) {\r\n//           videoRef.seekTo(0);\r\n//           videoRef.play();\r\n//           setPlayingVideos((prevPlayingVideos) => [\r\n//             ...prevPlayingVideos,\r\n//             videoId,\r\n//           ]);\r\n//         } else if (!entry.isIntersecting && isPlaying) {\r\n//           videoRef.pause();\r\n//           setPlayingVideos((prevPlayingVideos) =>\r\n//             prevPlayingVideos.filter((id) => id !== videoId)\r\n//           );\r\n//         }\r\n//       });\r\n//     },\r\n//     [playingVideos]\r\n//   );\r\n//   return (\r\n//     <div className=\"max-w-screen max-h-screen overflow-auto\">\r\n//       <div className=\"flex flex-wrap justify-center items-center mt-[60px]\">\r\n//         {videos.map((video) => (\r\n//           <div\r\n//             key={video.id}\r\n//             className=\"flex justify-center items-center mb-[45px] shadow-2xl rounded-2xl overflow-hidden\"\r\n            \r\n//           >\r\n//             <ReactPlayer\r\n//               ref={(ref) => (videoRefs.current[video.id] = ref)}\r\n//               data-id={video.id}\r\n//               url={video.url}\r\n//               playing={playingVideos.includes(video.id)}\r\n//               onPlay={() => handleVideoChange(video.id)}\r\n//               autoPlay={false}\r\n//               width=\"960px\"\r\n//               height=\"540px\"\r\n//               controls\r\n//               allowFullScreen={true}\r\n//               config={{\r\n//                 youtube: {\r\n//                   playerVars: { showinfo: 1 },\r\n//                 },\r\n//               }}\r\n//               loading=\"lazy\"\r\n//               preload\r\n//             />\r\n//           </div>\r\n//         ))}\r\n//       </div>\r\n//       {videoRefs.current.length > 0 && (\r\n//         <InView\r\n//           rootMargin=\"0px\"\r\n//           threshold={0.5}\r\n//           onChange={handleIntersection}\r\n//         >\r\n//           {videos.map((video) => (\r\n//             <div\r\n//               key={video.id}\r\n//               data-id={video.id}\r\n//               ref={(ref) => (videoRefs.current[video.id] = ref)}\r\n//             />\r\n//           ))}\r\n//         </InView>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default WatchPage;"],"mappings},"metadata":{},"sourceType":"module","externalDependencies":[]}