{"ast":null,"code":"var _jsxFileName = \"D:\\\\Workspace\\\\LuanVan\\\\website\\\\frontend-web\\\\src\\\\components\\\\layout\\\\watch.js\",\n  _s = $RefreshSig$();\n// import React, { useRef, useState, useCallback } from 'react';\n// import ReactPlayer from 'react-player/lazy';\n// import { InView } from 'react-intersection-observer';\n\n// const WatchPage = () => {\n\n//   const videoRefs = useRef([]);\n//   const videos = [\n//     { \n//       id: 1,\n//       url: \"https://www.youtube.com/watch?v=KxaX-eYPjQw\",\n//     },\n//     { \n//       id: 2,\n//       url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\",\n//     },\n//     { \n//       id: 12,\n//       url: \"https://www.youtube.com/watch?v=WSS6lnszkrc\",\n//     },\n//   ];\n//   const [playingVideos, setPlayingVideos] = useState([]);\n//   const handleVideoChange = useCallback((videoId) => {\n//     if (playingVideos.includes(videoId)) {\n//       setPlayingVideos([]);\n//     } else {\n//       // Tạm dừng tất cả các video\n//       const pausePromises = videoRefs.current.map((ref) => {\n//         if (ref.current && ref.current.dataset.id !== videoId && ref.current.getCurrentTime() > 0 && !ref.current.ended && !ref.current.paused) {\n//           return ref.current.pause();\n//         }\n//         return Promise.resolve();\n//       });\n//       Promise.all(pausePromises).then(() => {\n//         // Trở về điểm bắt đầu của tất cả các video\n//         videoRefs.current.forEach((ref) => {\n//           if (ref.current && ref.current.dataset.id !== videoId) {\n//             ref.current.seekTo(0);\n//           }\n//         });\n//         // Phát video mới\n//         setPlayingVideos([videoId]);\n//       });\n//     }\n//   }, [playingVideos]);\n\n//   const handleIntersection = useCallback(\n//     (entries) => {\n//       entries.forEach((entry) => {\n//         const videoId = entry.target.dataset.id;\n//         const isPlaying = playingVideos.includes(videoId);\n//         const videoRef = videoRefs.current.find(\n//           (ref) => ref.current.dataset.id === videoId\n//         );\n\n//         if (entry.isIntersecting && !isPlaying) {\n//           videoRef.seekTo(0);\n//           videoRef.play();\n//           setPlayingVideos((prevPlayingVideos) => [\n//             ...prevPlayingVideos,\n//             videoId,\n//           ]);\n//         } else if (!entry.isIntersecting && isPlaying) {\n//           videoRef.pause();\n//           setPlayingVideos((prevPlayingVideos) =>\n//             prevPlayingVideos.filter((id) => id !== videoId)\n//           );\n//         }\n//       });\n//     },\n//     [playingVideos]\n//   );\n//   return (\n//     <div className=\"max-w-screen max-h-screen overflow-auto\">\n//       <div className=\"flex flex-wrap justify-center items-center mt-[60px]\">\n//         {videos.map((video) => (\n//           <div\n//             key={video.id}\n//             className=\"flex justify-center items-center mb-[45px] shadow-2xl rounded-2xl overflow-hidden\"\n\n//           >\n//             <ReactPlayer\n//               ref={(ref) => (videoRefs.current[video.id] = ref)}\n//               data-id={video.id}\n//               url={video.url}\n//               playing={playingVideos.includes(video.id)}\n//               onPlay={() => handleVideoChange(video.id)}\n//               autoPlay={false}\n//               width=\"960px\"\n//               height=\"540px\"\n//               controls\n//               allowFullScreen={true}\n//               config={{\n//                 youtube: {\n//                   playerVars: { showinfo: 1 },\n//                 },\n//               }}\n//               loading=\"lazy\"\n//               preload\n//             />\n//           </div>\n//         ))}\n//       </div>\n//       {videoRefs.current.length > 0 && (\n//         <InView\n//           rootMargin=\"0px\"\n//           threshold={0.5}\n//           onChange={handleIntersection}\n//         >\n//           {videos.map((video) => (\n//             <div\n//               key={video.id}\n//               data-id={video.id}\n//               ref={(ref) => (videoRefs.current[video.id] = ref)}\n//             />\n//           ))}\n//         </InView>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default WatchPage;\nimport React, { useRef, useEffect, useState } from 'react';\nimport ReactPlayer from 'react-player/lazy';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst setPlayingState = (newPlayingVideos, playingVideos, videoRefs) => {\n  videoRefs.current.forEach(ref => {\n    var _ref$current;\n    const videoId = (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.getAttribute('data-id');\n    if (playingVideos.includes(videoId)) {\n      if (!newPlayingVideos.includes(videoId)) {\n        ref.current.pause();\n      } else {\n        ref.current.seekTo(0);\n        ref.current.play();\n      }\n    }\n  });\n  return newPlayingVideos;\n};\nconst WatchPage = () => {\n  _s();\n  const videos = [{\n    id: 1,\n    url: \"https://www.youtube.com/watch?v=KxaX-eYPjQw\"\n  }, {\n    id: 2,\n    url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\"\n  },\n  // { \n  //   id: 3,\n  //   url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\",\n  // },\n  // { \n  //   id: 4,\n  //   url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\",\n  // },\n  // { \n  //   id: 5,\n  //   url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\",\n  // },\n  // { \n  //   id: 6,\n  //   url: \"https://www.youtube.com/watch?v=KxaX-eYPjQw\",\n  // },\n  // { \n  //   id: 7,\n  //   url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\",\n  // },\n  // { \n  //   id: 8,\n  //   url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\",\n  // },\n  // { \n  //   id: 9,\n  //   url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\",\n  // },\n  // { \n  //   id: 10,\n  //   url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\",\n  // },\n  // { \n  //   id: 11,\n  //   url: \"https://www.youtube.com/watch?v=KxaX-eYPjQw\",\n  // },\n  {\n    id: 12,\n    url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\"\n  }\n  // { \n  //   id: 13,\n  //   url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\",\n  // },\n  // { \n  //   id: 14,\n  //   url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\",\n  // },\n  // { \n  //   id: 15,\n  //   url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\",\n  // },\n  ];\n\n  // hàm xáo trộn danh sách video\n  const shuffleVideos = videos => {\n    for (let i = videos.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [videos[i], videos[j]] = [videos[j], videos[i]];\n    }\n    return videos;\n  };\n  const shuffledVideos = shuffleVideos(videos); // xáo trộn danh sách video\n\n  const videoRefs = useRef([]);\n  const [playingVideo, setPlayingVideo] = useState(null);\n  const [playingVideos, setPlayingVideos] = useState([]);\n  const handleError = error => {\n    console.log('An error occurred:', error);\n  };\n  const handleVideoChange = video => {\n    const videoId = video.id.toString();\n    if (playingVideos.includes(videoId)) {\n      setPlayingVideo(null);\n      setPlayingVideos([]);\n    } else {\n      setPlayingVideo(videoId);\n      setPlayingVideos([videoId]);\n    }\n  };\n  useEffect(() => {\n    setPlayingState(playingVideos, playingVideos, videoRefs);\n  }, [playingVideos]);\n  useEffect(() => {\n    // hàm kiểm tra xem video có đang nằm trong phạm vi màn hình hay không\n\n    const refs = videoRefs.current;\n    refs.forEach(ref => {\n      if (ref.current) {\n        observer.observe(ref.current);\n      }\n    });\n    return () => {\n      refs.forEach(ref => {\n        if (ref.current) {\n          observer.unobserve(ref.current);\n        }\n      });\n    };\n  }, [playingVideos, videoRefs]);\n  const handleIntersection = entries => {\n    entries.forEach(entry => {\n      var _entry$target;\n      const videoId = (_entry$target = entry.target) === null || _entry$target === void 0 ? void 0 : _entry$target.getAttribute('data-id');\n      const isPlaying = playingVideos.includes(videoId);\n      const videoIndex = videoRefs.current.findIndex(ref => {\n        var _ref$current2;\n        return ((_ref$current2 = ref.current) === null || _ref$current2 === void 0 ? void 0 : _ref$current2.getAttribute('data-id')) === videoId;\n      });\n      if (entry.isIntersecting && !isPlaying) {\n        const videoRef = videoRefs.current[videoIndex];\n        if (videoRef) {\n          videoRef.current.seekTo(0);\n          videoRef.current.play();\n        }\n        setPlayingVideos(prevPlayingVideos => setPlayingState([...prevPlayingVideos, videoId], prevPlayingVideos, videoRefs));\n      } else if (!entry.isIntersecting && isPlaying) {\n        const videoRef = videoRefs.current[videoIndex];\n        if (videoRef) {\n          videoRef.current.pause();\n        }\n        setPlayingVideos(prevPlayingVideos => setPlayingState(prevPlayingVideos.filter(id => id !== videoId), prevPlayingVideos, videoRefs));\n      }\n    });\n  };\n  const observer = new IntersectionObserver(handleIntersection, {\n    threshold: 0.5\n  });\n  useEffect(() => {\n    const newVideoIndex = videoRefs.current.length - 1;\n    const newVideoRef = videoRefs.current[newVideoIndex];\n    if (newVideoRef.current) {\n      observer.observe(newVideoRef.current);\n    }\n    return () => {\n      if (newVideoRef.current) {\n        observer.unobserve(newVideoRef.current);\n      }\n    };\n  }, [videoRefs.current]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-screen max-h-screen overflow-auto\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-wrap justify-center items-center mt-[60px]\",\n      children: shuffledVideos.map((video, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-center items-center mb-[45px] shadow-2xl rounded-2xl overflow-hidden\",\n        children: [/*#__PURE__*/_jsxDEV(ReactPlayer, {\n          // sử dụng giá trị video.id làm key\n          ref: ref => videoRefs.current[i] = ref,\n          \"data-id\": video.id,\n          url: video.url,\n          playing: playingVideo === video.id.toString(),\n          muted: true,\n          autoPlay: false,\n          onError: handleError,\n          width: \"960px\",\n          height: \"540px\",\n          controls: true,\n          allowFullScreen: true,\n          config: {\n            youtube: {\n              playerVars: {\n                showinfo: 1\n              }\n            }\n          },\n          onPlay: handleVideoChange,\n          onPause: () => {\n            setPlayingVideos([]);\n          },\n          loading: \"lazy\" // sử dụng lazy load\n        }, video.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 13\n        }, this), console.log(playingVideos)]\n      }, video.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 301,\n    columnNumber: 5\n  }, this);\n};\n_s(WatchPage, \"AC9zZ3BAVdtdyOCMqLBgEFd7Khs=\");\n_c = WatchPage;\nexport default WatchPage;\nvar _c;\n$RefreshReg$(_c, \"WatchPage\");","map":{"version":3,"names":["React","useRef","useEffect","useState","ReactPlayer","jsxDEV","_jsxDEV","setPlayingState","newPlayingVideos","playingVideos","videoRefs","current","forEach","ref","_ref$current","videoId","getAttribute","includes","pause","seekTo","play","WatchPage","_s","videos","id","url","shuffleVideos","i","length","j","Math","floor","random","shuffledVideos","playingVideo","setPlayingVideo","setPlayingVideos","handleError","error","console","log","handleVideoChange","video","toString","refs","observer","observe","unobserve","handleIntersection","entries","entry","_entry$target","target","isPlaying","videoIndex","findIndex","_ref$current2","isIntersecting","videoRef","prevPlayingVideos","filter","IntersectionObserver","threshold","newVideoIndex","newVideoRef","className","children","map","playing","muted","autoPlay","onError","width","height","controls","allowFullScreen","config","youtube","playerVars","showinfo","onPlay","onPause","loading","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Workspace/LuanVan/website/frontend-web/src/components/layout/watch.js"],"sourcesContent":["// import React, { useRef, useState, useCallback } from 'react';\r\n// import ReactPlayer from 'react-player/lazy';\r\n// import { InView } from 'react-intersection-observer';\r\n\r\n// const WatchPage = () => {\r\n\r\n//   const videoRefs = useRef([]);\r\n//   const videos = [\r\n//     { \r\n//       id: 1,\r\n//       url: \"https://www.youtube.com/watch?v=KxaX-eYPjQw\",\r\n//     },\r\n//     { \r\n//       id: 2,\r\n//       url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\",\r\n//     },\r\n//     { \r\n//       id: 12,\r\n//       url: \"https://www.youtube.com/watch?v=WSS6lnszkrc\",\r\n//     },\r\n//   ];\r\n//   const [playingVideos, setPlayingVideos] = useState([]);\r\n//   const handleVideoChange = useCallback((videoId) => {\r\n//     if (playingVideos.includes(videoId)) {\r\n//       setPlayingVideos([]);\r\n//     } else {\r\n//       // Tạm dừng tất cả các video\r\n//       const pausePromises = videoRefs.current.map((ref) => {\r\n//         if (ref.current && ref.current.dataset.id !== videoId && ref.current.getCurrentTime() > 0 && !ref.current.ended && !ref.current.paused) {\r\n//           return ref.current.pause();\r\n//         }\r\n//         return Promise.resolve();\r\n//       });\r\n//       Promise.all(pausePromises).then(() => {\r\n//         // Trở về điểm bắt đầu của tất cả các video\r\n//         videoRefs.current.forEach((ref) => {\r\n//           if (ref.current && ref.current.dataset.id !== videoId) {\r\n//             ref.current.seekTo(0);\r\n//           }\r\n//         });\r\n//         // Phát video mới\r\n//         setPlayingVideos([videoId]);\r\n//       });\r\n//     }\r\n//   }, [playingVideos]);\r\n\r\n//   const handleIntersection = useCallback(\r\n//     (entries) => {\r\n//       entries.forEach((entry) => {\r\n//         const videoId = entry.target.dataset.id;\r\n//         const isPlaying = playingVideos.includes(videoId);\r\n//         const videoRef = videoRefs.current.find(\r\n//           (ref) => ref.current.dataset.id === videoId\r\n//         );\r\n\r\n//         if (entry.isIntersecting && !isPlaying) {\r\n//           videoRef.seekTo(0);\r\n//           videoRef.play();\r\n//           setPlayingVideos((prevPlayingVideos) => [\r\n//             ...prevPlayingVideos,\r\n//             videoId,\r\n//           ]);\r\n//         } else if (!entry.isIntersecting && isPlaying) {\r\n//           videoRef.pause();\r\n//           setPlayingVideos((prevPlayingVideos) =>\r\n//             prevPlayingVideos.filter((id) => id !== videoId)\r\n//           );\r\n//         }\r\n//       });\r\n//     },\r\n//     [playingVideos]\r\n//   );\r\n//   return (\r\n//     <div className=\"max-w-screen max-h-screen overflow-auto\">\r\n//       <div className=\"flex flex-wrap justify-center items-center mt-[60px]\">\r\n//         {videos.map((video) => (\r\n//           <div\r\n//             key={video.id}\r\n//             className=\"flex justify-center items-center mb-[45px] shadow-2xl rounded-2xl overflow-hidden\"\r\n            \r\n//           >\r\n//             <ReactPlayer\r\n//               ref={(ref) => (videoRefs.current[video.id] = ref)}\r\n//               data-id={video.id}\r\n//               url={video.url}\r\n//               playing={playingVideos.includes(video.id)}\r\n//               onPlay={() => handleVideoChange(video.id)}\r\n//               autoPlay={false}\r\n//               width=\"960px\"\r\n//               height=\"540px\"\r\n//               controls\r\n//               allowFullScreen={true}\r\n//               config={{\r\n//                 youtube: {\r\n//                   playerVars: { showinfo: 1 },\r\n//                 },\r\n//               }}\r\n//               loading=\"lazy\"\r\n//               preload\r\n//             />\r\n//           </div>\r\n//         ))}\r\n//       </div>\r\n//       {videoRefs.current.length > 0 && (\r\n//         <InView\r\n//           rootMargin=\"0px\"\r\n//           threshold={0.5}\r\n//           onChange={handleIntersection}\r\n//         >\r\n//           {videos.map((video) => (\r\n//             <div\r\n//               key={video.id}\r\n//               data-id={video.id}\r\n//               ref={(ref) => (videoRefs.current[video.id] = ref)}\r\n//             />\r\n//           ))}\r\n//         </InView>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default WatchPage;\r\nimport React, { useRef, useEffect, useState } from 'react';\r\nimport ReactPlayer from 'react-player/lazy';\r\n\r\nconst setPlayingState = (newPlayingVideos, playingVideos, videoRefs) => {\r\n  videoRefs.current.forEach((ref) => {\r\n    const videoId = ref.current?.getAttribute('data-id');\r\n    if (playingVideos.includes(videoId)) {\r\n      if (!newPlayingVideos.includes(videoId)) {\r\n        ref.current.pause();\r\n      } else {\r\n        ref.current.seekTo(0);\r\n        ref.current.play();\r\n      }\r\n    }\r\n  });\r\n  return newPlayingVideos;\r\n};\r\n\r\nconst WatchPage = () => {\r\n\r\n  const videos = [\r\n    { \r\n      id: 1,\r\n      url: \"https://www.youtube.com/watch?v=KxaX-eYPjQw\",\r\n    },\r\n    { \r\n      id: 2,\r\n      url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\",\r\n    },\r\n    // { \r\n    //   id: 3,\r\n    //   url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\",\r\n    // },\r\n    // { \r\n    //   id: 4,\r\n    //   url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\",\r\n    // },\r\n    // { \r\n    //   id: 5,\r\n    //   url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\",\r\n    // },\r\n    // { \r\n    //   id: 6,\r\n    //   url: \"https://www.youtube.com/watch?v=KxaX-eYPjQw\",\r\n    // },\r\n    // { \r\n    //   id: 7,\r\n    //   url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\",\r\n    // },\r\n    // { \r\n    //   id: 8,\r\n    //   url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\",\r\n    // },\r\n    // { \r\n    //   id: 9,\r\n    //   url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\",\r\n    // },\r\n    // { \r\n    //   id: 10,\r\n    //   url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\",\r\n    // },\r\n    // { \r\n    //   id: 11,\r\n    //   url: \"https://www.youtube.com/watch?v=KxaX-eYPjQw\",\r\n    // },\r\n    { \r\n      id: 12,\r\n      url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\",\r\n    },\r\n    // { \r\n    //   id: 13,\r\n    //   url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\",\r\n    // },\r\n    // { \r\n    //   id: 14,\r\n    //   url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\",\r\n    // },\r\n    // { \r\n    //   id: 15,\r\n    //   url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\",\r\n    // },\r\n   \r\n  ];\r\n\r\n  // hàm xáo trộn danh sách video\r\n  const shuffleVideos = (videos) => {\r\n    for (let i = videos.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [videos[i], videos[j]] = [videos[j], videos[i]];\r\n    }\r\n    return videos;\r\n  };\r\n\r\n  const shuffledVideos = shuffleVideos(videos); // xáo trộn danh sách video\r\n  \r\n  const videoRefs = useRef([]);\r\n  const [playingVideo, setPlayingVideo] = useState(null);\r\n  const [playingVideos, setPlayingVideos] = useState([]);\r\n  const handleError = (error) => {\r\n    console.log('An error occurred:', error);\r\n  };\r\n\r\n  const handleVideoChange = (video) => {\r\n    const videoId = video.id.toString();\r\n    if (playingVideos.includes(videoId)) {\r\n      setPlayingVideo(null);\r\n      setPlayingVideos([]);\r\n    } else {\r\n      setPlayingVideo(videoId);\r\n      setPlayingVideos([videoId]);\r\n    }\r\n  };\r\n  \r\n  useEffect(() => {\r\n    setPlayingState(playingVideos, playingVideos, videoRefs);\r\n  }, [playingVideos]);\r\n  useEffect(() => {\r\n    // hàm kiểm tra xem video có đang nằm trong phạm vi màn hình hay không\r\n    \r\n    \r\n\r\n    \r\n    \r\n    const refs = videoRefs.current;\r\n    refs.forEach((ref) => {\r\n      if (ref.current) {\r\n        observer.observe(ref.current);\r\n      }\r\n    });\r\n  \r\n    return () => {\r\n      refs.forEach((ref) => {\r\n        if (ref.current) {\r\n          observer.unobserve(ref.current);\r\n        }\r\n      });\r\n    };\r\n  }, [playingVideos, videoRefs]);\r\n  const handleIntersection = (entries) => {\r\n      entries.forEach((entry) => {\r\n        const videoId = entry.target?.getAttribute('data-id');\r\n        const isPlaying = playingVideos.includes(videoId);\r\n        const videoIndex = videoRefs.current.findIndex((ref) => ref.current?.getAttribute('data-id') === videoId);\r\n    \r\n        if (entry.isIntersecting && !isPlaying) {\r\n          const videoRef = videoRefs.current[videoIndex];\r\n          if (videoRef) {\r\n            videoRef.current.seekTo(0);\r\n            videoRef.current.play();\r\n          }\r\n          setPlayingVideos((prevPlayingVideos) => setPlayingState([...prevPlayingVideos, videoId], prevPlayingVideos, videoRefs));\r\n        } else if (!entry.isIntersecting && isPlaying) {\r\n          const videoRef = videoRefs.current[videoIndex];\r\n          if (videoRef) {\r\n            videoRef.current.pause();\r\n          }\r\n          setPlayingVideos((prevPlayingVideos) => setPlayingState(prevPlayingVideos.filter((id) => id !== videoId), prevPlayingVideos, videoRefs));\r\n        }\r\n      });\r\n    };\r\nconst observer = new IntersectionObserver(handleIntersection, {\r\n      threshold: 0.5,\r\n    });\r\n  useEffect(() => {\r\n    const newVideoIndex = videoRefs.current.length - 1;\r\n    const newVideoRef = videoRefs.current[newVideoIndex];\r\n    if (newVideoRef.current) {\r\n      observer.observe(newVideoRef.current);\r\n    }\r\n    return () => {\r\n      if (newVideoRef.current) {\r\n        observer.unobserve(newVideoRef.current);\r\n      }\r\n    };\r\n  }, [videoRefs.current]);\r\n\r\n  return (\r\n    <div className=\"max-w-screen max-h-screen overflow-auto\">\r\n      <div className=\"flex flex-wrap justify-center items-center mt-[60px]\">\r\n        {shuffledVideos.map((video,i) => (\r\n          <div \r\n            key={video.id} \r\n            className=\"flex justify-center items-center mb-[45px] shadow-2xl rounded-2xl overflow-hidden\"\r\n            \r\n          >\r\n            <ReactPlayer\r\n              key={video.id} // sử dụng giá trị video.id làm key\r\n              ref={(ref) => videoRefs.current[i] = ref}\r\n              data-id={video.id}\r\n              url={video.url}\r\n              playing={playingVideo === video.id.toString()}\r\n              muted={true}\r\n              autoPlay={false}\r\n              onError={handleError}\r\n              width=\"960px\"\r\n              height=\"540px\"\r\n              controls\r\n              allowFullScreen={true}\r\n              config={{\r\n                youtube: {\r\n                  playerVars: { showinfo: 1 }\r\n                }\r\n              }}\r\n              onPlay={handleVideoChange}\r\n              \r\n              onPause={() => {\r\n                setPlayingVideos([]);\r\n              }}\r\n              loading=\"lazy\" // sử dụng lazy load\r\n            /> \r\n            {console.log(playingVideos)}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WatchPage;"],"mappings":";;AAAA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAOC,WAAW,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,eAAe,GAAGA,CAACC,gBAAgB,EAAEC,aAAa,EAAEC,SAAS,KAAK;EACtEA,SAAS,CAACC,OAAO,CAACC,OAAO,CAAEC,GAAG,IAAK;IAAA,IAAAC,YAAA;IACjC,MAAMC,OAAO,IAAAD,YAAA,GAAGD,GAAG,CAACF,OAAO,cAAAG,YAAA,uBAAXA,YAAA,CAAaE,YAAY,CAAC,SAAS,CAAC;IACpD,IAAIP,aAAa,CAACQ,QAAQ,CAACF,OAAO,CAAC,EAAE;MACnC,IAAI,CAACP,gBAAgB,CAACS,QAAQ,CAACF,OAAO,CAAC,EAAE;QACvCF,GAAG,CAACF,OAAO,CAACO,KAAK,CAAC,CAAC;MACrB,CAAC,MAAM;QACLL,GAAG,CAACF,OAAO,CAACQ,MAAM,CAAC,CAAC,CAAC;QACrBN,GAAG,CAACF,OAAO,CAACS,IAAI,CAAC,CAAC;MACpB;I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"},"metadata":{},"sourceType":"module","externalDependencies":[]}