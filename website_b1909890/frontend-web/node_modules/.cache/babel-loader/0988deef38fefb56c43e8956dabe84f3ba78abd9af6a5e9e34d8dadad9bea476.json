{"ast":null,"code":"var _jsxFileName = \"D:\\\\Workspace\\\\LuanVan\\\\website\\\\frontend-web\\\\src\\\\components\\\\layout\\\\watch.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useCallback } from 'react';\nimport ReactPlayer from 'react-player/lazy';\nimport { InView } from 'react-intersection-observer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WatchPage = () => {\n  _s();\n  const videoRefs = useRef([]);\n  const videos = [{\n    id: 1,\n    url: \"https://www.youtube.com/watch?v=KxaX-eYPjQw\"\n  }, {\n    id: 2,\n    url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\"\n  }, {\n    id: 12,\n    url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\"\n  }];\n  const [playingVideos, setPlayingVideos] = useState([]);\n  const handleVideoChange = useCallback(videoId => {\n    if (playingVideos.includes(videoId)) {\n      setPlayingVideos([]);\n    } else {\n      setPlayingVideos([videoId]);\n      videoRefs.current.forEach(ref => {\n        if (ref.current.dataset.id !== videoId) {\n          ref.current.seekTo(0);\n          ref.current.pause();\n        }\n      });\n    }\n  }, [playingVideos]);\n  const handleIntersection = useCallback(entries => {\n    entries.forEach(entry => {\n      const videoId = entry.target.dataset.id;\n      const isPlaying = playingVideos.includes(videoId);\n      const videoRef = videoRefs.current.find(ref => ref.current.dataset.id === videoId);\n      if (entry.isIntersecting && !isPlaying) {\n        videoRef.seekTo(0);\n        videoRef.play();\n        setPlayingVideos(prevPlayingVideos => [...prevPlayingVideos, videoId]);\n      } else if (!entry.isIntersecting && isPlaying) {\n        videoRef.pause();\n        setPlayingVideos(prevPlayingVideos => prevPlayingVideos.filter(id => id !== videoId));\n      }\n    });\n  }, [playingVideos]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-screen max-h-screen overflow-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-wrap justify-center items-center mt-[60px]\",\n      children: videos.map(video => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-center items-center mb-[45px] shadow-2xl rounded-2xl overflow-hidden\",\n        onPlay: () => handleVideoChange(video.id),\n        children: /*#__PURE__*/_jsxDEV(ReactPlayer, {\n          ref: ref => videoRefs.current[video.id] = ref,\n          \"data-id\": video.id,\n          url: video.url,\n          playing: playingVideos.includes(video.id),\n          autoPlay: false,\n          width: \"960px\",\n          height: \"540px\",\n          controls: true,\n          allowFullScreen: true,\n          config: {\n            youtube: {\n              playerVars: {\n                showinfo: 1\n              }\n            }\n          },\n          loading: \"lazy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this)\n      }, video.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), videoRefs.current.length > 0 && /*#__PURE__*/_jsxDEV(InView, {\n      rootMargin: \"0px\",\n      threshold: 0.5,\n      onChange: handleIntersection,\n      children: videos.map(video => /*#__PURE__*/_jsxDEV(\"div\", {\n        \"data-id\": video.id,\n        ref: ref => videoRefs.current[video.id] = ref\n      }, video.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(WatchPage, \"ec5ZkoSH5LJ1WHp7tlqiaY3DLwc=\");\n_c = WatchPage;\nexport default WatchPage;\nvar _c;\n$RefreshReg$(_c, \"WatchPage\");","map":{"version":3,"names":["React","useRef","useState","useCallback","ReactPlayer","InView","jsxDEV","_jsxDEV","WatchPage","_s","videoRefs","videos","id","url","playingVideos","setPlayingVideos","handleVideoChange","videoId","includes","current","forEach","ref","dataset","seekTo","pause","handleIntersection","entries","entry","target","isPlaying","videoRef","find","isIntersecting","play","prevPlayingVideos","filter","className","children","map","video","onPlay","playing","autoPlay","width","height","controls","allowFullScreen","config","youtube","playerVars","showinfo","loading","fileName","_jsxFileName","lineNumber","columnNumber","length","rootMargin","threshold","onChange","_c","$RefreshReg$"],"sources":["D:/Workspace/LuanVan/website/frontend-web/src/components/layout/watch.js"],"sourcesContent":["import React, { useRef, useState, useCallback } from 'react';\r\nimport ReactPlayer from 'react-player/lazy';\r\nimport { InView } from 'react-intersection-observer';\r\n\r\nconst WatchPage = () => {\r\n\r\n  const videoRefs = useRef([]);\r\n  const videos = [\r\n    { \r\n      id: 1,\r\n      url: \"https://www.youtube.com/watch?v=KxaX-eYPjQw\",\r\n    },\r\n    { \r\n      id: 2,\r\n      url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\",\r\n    },\r\n    { \r\n      id: 12,\r\n      url: \"https://www.youtube.com/watch?v=d1_JKFy_fIk\",\r\n    },\r\n  ];\r\n  const [playingVideos, setPlayingVideos] = useState([]);\r\n  const handleVideoChange = useCallback(\r\n    (videoId) => {\r\n      if (playingVideos.includes(videoId)) {\r\n        setPlayingVideos([]);\r\n      } else {\r\n        setPlayingVideos([videoId]);\r\n        videoRefs.current.forEach((ref) => {\r\n          if (ref.current.dataset.id !== videoId) {\r\n            ref.current.seekTo(0);\r\n            ref.current.pause();\r\n          }\r\n        });\r\n      }\r\n    },\r\n    [playingVideos]\r\n  );\r\n\r\n  const handleIntersection = useCallback(\r\n    (entries) => {\r\n      entries.forEach((entry) => {\r\n        const videoId = entry.target.dataset.id;\r\n        const isPlaying = playingVideos.includes(videoId);\r\n        const videoRef = videoRefs.current.find(\r\n          (ref) => ref.current.dataset.id === videoId\r\n        );\r\n\r\n        if (entry.isIntersecting && !isPlaying) {\r\n          videoRef.seekTo(0);\r\n          videoRef.play();\r\n          setPlayingVideos((prevPlayingVideos) => [\r\n            ...prevPlayingVideos,\r\n            videoId,\r\n          ]);\r\n        } else if (!entry.isIntersecting && isPlaying) {\r\n          videoRef.pause();\r\n          setPlayingVideos((prevPlayingVideos) =>\r\n            prevPlayingVideos.filter((id) => id !== videoId)\r\n          );\r\n        }\r\n      });\r\n    },\r\n    [playingVideos]\r\n  );\r\n  return (\r\n    <div className=\"max-w-screen max-h-screen overflow-auto\">\r\n      <div className=\"flex flex-wrap justify-center items-center mt-[60px]\">\r\n        {videos.map((video) => (\r\n          <div\r\n            key={video.id}\r\n            className=\"flex justify-center items-center mb-[45px] shadow-2xl rounded-2xl overflow-hidden\"\r\n            onPlay={() => handleVideoChange(video.id)}\r\n          >\r\n            <ReactPlayer\r\n              ref={(ref) => (videoRefs.current[video.id] = ref)}\r\n              data-id={video.id}\r\n              url={video.url}\r\n              playing={playingVideos.includes(video.id)}\r\n\r\n              autoPlay={false}\r\n              width=\"960px\"\r\n              height=\"540px\"\r\n              controls\r\n              allowFullScreen={true}\r\n              config={{\r\n                youtube: {\r\n                  playerVars: { showinfo: 1 },\r\n                },\r\n              }}\r\n              loading=\"lazy\"\r\n            />\r\n          </div>\r\n        ))}\r\n      </div>\r\n      {videoRefs.current.length > 0 && (\r\n        <InView\r\n          rootMargin=\"0px\"\r\n          threshold={0.5}\r\n          onChange={handleIntersection}\r\n        >\r\n          {videos.map((video) => (\r\n            <div\r\n              key={video.id}\r\n              data-id={video.id}\r\n              ref={(ref) => (videoRefs.current[video.id] = ref)}\r\n            />\r\n          ))}\r\n        </InView>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WatchPage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}